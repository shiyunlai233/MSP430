


//这个程序只能存储一个矩阵results，表示2s的时间段内不同采样率的采样结果
//修复了一个求余时候自动int转float导致的错误
#include <msp430F5438A.h>  

#define CPU_F ((double)24000000UL)                              //XT2 --> 24MHZ
#define Delay_us(x) __delay_cycles((long)(CPU_F*(double)x/1000000.0)) //延时1us
#define Delay_ms(x) __delay_cycles((long)(CPU_F*(double)x/1000.0))    //延时1ms
  
unsigned int results,results_before,test;
unsigned int temp_data[10];

unsigned int lun,i;
unsigned int caiyang_rate,caiyang_zhizhen;
unsigned int temp_sum;
unsigned int guoling_n,guoling_rate;
unsigned int temp_max,temp_max2,temp_min,temp_min2;
unsigned int max,min;
                                           


int main(void)
{
  WDTCTL = WDTPW+WDTHOLD;                   // Stop watchdog timer
  P6SEL |= 0x01;                            // Enable A/D channel A0     P6.0
  ADC12CTL0 = ADC12ON+ADC12SHT0_8+ADC12MSC; // Turn on ADC12, set sampling time
                                            // set multiple sample conversion
  ADC12CTL1 = ADC12SHP+ADC12CONSEQ_2;       // Use sampling timer, set mode
  ADC12IE = 0x01;                           // Enable ADC12IFG.0
  ADC12CTL0 |= ADC12ENC;                    // Enable conversions
  ADC12CTL0 |= ADC12SC;                     // Start conversion
  

  
  lun=0;
  caiyang_rate = 1;
  caiyang_zhizhen=0;
  results_before=0;
  guoling_n=0;    
  results=0;
  

			min = 10000;
  
  
  __bis_SR_register(GIE);       // Enable interrupts
  while(1){
	  
  }
}



#pragma vector=ADC12_VECTOR
__interrupt void ADC12ISR (void)
{


  switch(__even_in_range(ADC12IV,34))
  {

  case  6:         
	if(caiyang_zhizhen==caiyang_rate){
		
		caiyang_zhizhen=0;
		
		for(int i=0;i<9;i++)temp_data[i]=temp_data[i+1];   //求短时平均值作为采样值（这种pop方法很笨）
		temp_data[9] = ADC12MEM0;
		temp_sum=0;
		for(i=0;i<10;i++)temp_sum=temp_sum+temp_data[i];
		//results = temp_sum/10;  
		results = ADC12MEM0;
		
          //记录下此时过零
		if(results<2048&&results_before>2048){guoling_n++;}    
		if(results>2048&&results_before<2048){guoling_n++;}   
		

		
		results_before=results;
		
		
     
	  temp_max =results;                    //求出最大值最小值            
	  temp_min=temp_max;
	  if(temp_max>temp_max2){temp_max2=temp_max;}
	  if(temp_min<temp_min2){temp_min2=temp_min;}
		
		lun++;
        if(lun==5000){
			lun=0; 
			guoling_rate=guoling_n/5.15;   //这个常数还是需要测定的
			guoling_n=0;       
			max= temp_max2/1.26;
			temp_max2 = 0;
			temp_max = 0;
			min= temp_min2;
			temp_min2 = 10000;
			temp_min = 10000;
		} 
	}
	caiyang_zhizhen++;
	
	

	


  
  default: break; 
  }
}
