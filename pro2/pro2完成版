//修改了uart输出时候的一些奇怪的的地方


#include <msp430F5438A.h>  

#define CPU_F ((double)24000000UL)                              //XT2 --> 24MHZ
#define Delay_us(x) __delay_cycles((long)(CPU_F*(double)x/1000000.0)) //延时1us
#define Delay_ms(x) __delay_cycles((long)(CPU_F*(double)x/1000.0))    //延时1ms
#define uchar unsigned char
#define uint unsigned char

void Init_UART();
void UART_SendString(uchar *String);
void send_number6(long a);


  
unsigned int results,results_before,test;
unsigned int test_data[100];
unsigned int label;

unsigned int lun,i;
unsigned int caiyang_rate,caiyang_zhizhen;
unsigned int temp_sum;
unsigned int guoling_n,guoling_rate;
unsigned int temp_max,temp_max2,temp_min,temp_min2;
unsigned int max,min;
                       
uchar message_f[]="The frequency is:(mV)";
uchar message_a[]="The range is:(Hz)";
uchar message_end[]="\r\n";					   
						   


int main(void)
{
  WDTCTL = WDTPW+WDTHOLD;                   // Stop watchdog timer
  
  Init_UART();                   //初始化串口
	
  P6SEL |= 0x01;                            // Enable A/D channel A0     P6.0
  ADC12CTL0 = ADC12ON+ADC12SHT0_8+ADC12MSC; // Turn on ADC12, set sampling time
  ADC12CTL1 = ADC12SHP+ADC12CONSEQ_2;       // Use sampling timer, set mode
  ADC12IE = 0x01;                           // Enable ADC12IFG.0
  ADC12CTL0 |= ADC12ENC;                    // Enable conversions
  ADC12CTL0 |= ADC12SC;                     // Start conversion
  

  
  lun=0;
  caiyang_rate = 1;
  caiyang_zhizhen=0;
  results_before=0;
  guoling_n=0;    
  results=0;
  
  label=0;
  min = 10000;
  

			
  
  
  __bis_SR_register(GIE);       // Enable interrupts
  while(1){
	  
  }
}



#pragma vector=ADC12_VECTOR
__interrupt void ADC12ISR (void)
{


  switch(__even_in_range(ADC12IV,34))
  {

  case  6:         
	if(caiyang_zhizhen==caiyang_rate){
		
		caiyang_zhizhen=0;
		
		// for(int i=0;i<9;i++)temp_data[i]=temp_data[i+1];   //求短时平均值作为采样值（这种pop方法很笨）
		// temp_data[9] = ADC12MEM0;
		// temp_sum=0;
		// for(i=0;i<10;i++)temp_sum=temp_sum+temp_data[i];
		//results = temp_sum/10;  
		results = ADC12MEM0;
		test_data[label]=results;
		label++;
		if(label>=100)label=0;
          //记录下此时过零
		if(results==0&&results_before>0){guoling_n++;}    
		//if(results>0&&results_before==0){guoling_n++;}   
		

		
		results_before=results;
		
		
     
	  temp_max =results;                    //求出最大值最小值            
	  temp_min=temp_max;
	  if(temp_max>temp_max2){temp_max2=temp_max;}
	  if(temp_min<temp_min2){temp_min2=temp_min;}
		
		lun++;
        if(lun==5000){
			max= temp_max2*1.538/2;
			guoling_rate=guoling_n*1.52;   //这个常数还是需要测定的
			
			UART_SendString(message_f);
			send_number6(max);
			//UART_SendString(message_end);
			UART_SendString(message_a);
			send_number6(guoling_rate);
			//UART_SendString(message_end);
			
			lun=0; 
			guoling_n=0;       
			temp_max2 = 0;
			temp_max = 0;
			min= temp_min2;
			temp_min2 = 10000;
			temp_min = 10000;
		} 
	}
	caiyang_zhizhen++;
	
	

	


  
  default: break; 
  }
}

void send_number6(long a)
{
	uchar message[]={0,0,0,0,0,0,'\n'};
	for(uint i=0;i<6;i++){
		message[5-i]=a-a/10*10+48;
		a=a/10;
	}
	UART_SendString(message);
}

void Init_UART()
{
  P3SEL = BIT4 + BIT5;                      // P3.4,5 = USCI_A0 TXD/RXD
  UCA0CTL1 |= UCSWRST;                      // **Put state machine in reset**
  UCA0CTL1 |= UCSSEL_1;                     // CLK = ACLK
  UCA0BR0 = 0x03;                           // 32kHz/9600=3.41 (see User's Guide)    // 9600Hz bote rate
  UCA0BR1 = 0x00;                           //
  UCA0MCTL = UCBRS_3+UCBRF_0;               // Modulation UCBRSx=3, UCBRFx=0
  UCA0CTL1 &= ~UCSWRST;             // **Initialize USCI state machine**
}

void UART_SendString(uchar *String)
{
  uchar i;
  
  for(i=0; String[i] != '\0'; i++)
  {
    while (!(UCA0IFG&UCTXIFG));             // USCI_A0 TX buffer ready?
    UCA0TXBUF = String[i];                  // TX -> String
  }
}
